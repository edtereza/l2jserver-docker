#!/bin/sh
# ---------------------------------------------------------------------------
# Script Path
# ---------------------------------------------------------------------------
SCRIPT_PATH="/opt/l2jserver"
# ---------------------------------------------------------------------------
# Config Paths
# ---------------------------------------------------------------------------
PATH_SERVER_CONFIG="${SCRIPT_PATH}/config"
PATH_CLIENT_CONFIG="${SCRIPT_PATH}/cli/config"
# ---------------------------------------------------------------------------
# Config Files
# ---------------------------------------------------------------------------
FILE_SERVER_CONFIG_SERVER="${PATH_SERVER_CONFIG}/server.properties"
FILE_SERVER_CONFIG_DATABASE="${PATH_SERVER_CONFIG}/database.properties"
FILE_CLIENT_CONFIG_DATABASE="${PATH_CLIENT_CONFIG}/game-server.properties"
# ---------------------------------------------------------------------------
# Function COPYRIGHT
# ---------------------------------------------------------------------------
container_copyright() {
    echo ''
}
# ---------------------------------------------------------------------------
# Function TRAP
# ---------------------------------------------------------------------------
container_trap() {
    kill $(ps aux | grep java | grep '.jar' | awk '{print $1}')
}
trap container_trap SIGINT SIGTERM
# ---------------------------------------------------------------------------
# Function LOG
# ---------------------------------------------------------------------------
container_log() {
	LOG_TEXT=$1
    LOG_INFO=$2
	LOG_MSEC=$(date "+%N")
	LOG_DATE=$(date "+%Y-%m-%d")
    LOG_TIME=$(date "+%H:%M:%S")
	# STDOUT
	echo "[${LOG_DATE} ${LOG_TIME}.${LOG_MSEC:0:5}] [${LOG_INFO}] ${LOG_TEXT}"	
}
# ---------------------------------------------------------------------------
# Function File Check
# ---------------------------------------------------------------------------
container_structure_check() {
    FILE_CHECK_SOURCE=$1
    FILE_CHECK_TARGET=$2
    PATH_CHECK_TARGET=$(dirname $FILE_CHECK_TARGET)
    if [[ -f $FILE_CHECK_SOURCE ]];
        then
            if [[ ! -f $FILE_CHECK_TARGET ]];
                then
                    mkdir --parent $PATH_CHECK_TARGET
                    cp $FILE_CHECK_SOURCE $FILE_CHECK_TARGET
                fi
        fi
}
# ---------------------------------------------------------------------------
# Function Structure Check
# ---------------------------------------------------------------------------
container_structure() {
    #
    container_log "Structure File Check" "INFO"
    #
    FILE_COUNT_SOURCE=$(ls -lR ${SCRIPT_PATH}/config.d/ | wc -l)
    container_log "- ${FILE_COUNT_SOURCE} Config Files" "INFO"
    find ${SCRIPT_PATH}/config.d/ -type f > ${SCRIPT_PATH}/config.d-files
    cat ${SCRIPT_PATH}/config.d-files | while read FILE_FULLPATH; do container_structure_check $FILE_FULLPATH $(echo "$FILE_FULLPATH" | sed "s/config.d/config/g"); done
    FILE_COUNT_TARGET=$(ls -lR ${SCRIPT_PATH}/config/ | wc -l)
    if [[ $FILE_COUNT_SOURCE -gt $FILE_COUNT_TARGET ]];
        then
            container_log "- - Config Files structure mismatch" "ERROR"
            return 0
        else
            container_log "- - Config Files structure match" "INFO"
        fi
    #
    FILE_COUNT_SOURCE=$(ls -lR ${SCRIPT_PATH}/data.d/ | wc -l)
    container_log "- ${FILE_COUNT_SOURCE} Data Files" "INFO"
    find ${SCRIPT_PATH}/data.d/ -type f > ${SCRIPT_PATH}/data.d-files
    cat ${SCRIPT_PATH}/data.d-files | while read FILE_FULLPATH; do container_structure_check $FILE_FULLPATH $(echo "$FILE_FULLPATH" | sed "s/data.d/data/g"); done
    FILE_COUNT_TARGET=$(ls -lR ${SCRIPT_PATH}/data/ | wc -l)
    if [[ $FILE_COUNT_SOURCE -gt $FILE_COUNT_TARGET ]];
        then
            container_log "- - Data Files structure mismatch" "ERROR"
            return 0
        else
            container_log "- - Data Files structure match" "INFO"
        fi
    #
    FILE_COUNT_SOURCE=$(ls -lR ${SCRIPT_PATH}/script.d/ | wc -l)
    container_log "- ${FILE_COUNT_SOURCE} Script Files" "INFO"
    find ${SCRIPT_PATH}/script.d/ -type f > ${SCRIPT_PATH}/script.d-files
    cat ${SCRIPT_PATH}/script.d-files | while read FILE_FULLPATH; do container_structure_check $FILE_FULLPATH $(echo "$FILE_FULLPATH" | sed "s/script.d/script/g"); done
    FILE_COUNT_TARGET=$(ls -lR ${SCRIPT_PATH}/script/ | wc -l)
    if [[ $FILE_COUNT_SOURCE -gt $FILE_COUNT_TARGET ]];
        then
            container_log "- - Script Files structure mismatch" "ERROR"
            return 0
        else
            container_log "- - Script Files structure match" "INFO"
        fi
    #
    return 1
}
# ---------------------------------------------------------------------------
# Function PARAMS
# ---------------------------------------------------------------------------
container_params() {
    MEMORY_MAX=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}');
    let MEMORY_MAX=$MEMORY_MAX/1024;
    let MEMORY_MAX=$MEMORY_MAX-1024;
    #
    container_log "JAVA Params" "INFO"
    #
    JAVA_XMS=${JAVA_XMS:-"512"}
    JAVA_XMS=$(echo $JAVA_XMS | sed 's/[^0-9]*//g')
    JAVA_XMX=${JAVA_XMX:-"2048"}
    JAVA_XMX=$(echo $JAVA_XMX | sed 's/[^0-9]*//g')
    if [[ ! $JAVA_XMS =~ ^[0-9]{1,10}$ ]];
        then
            container_log "- JAVA_XMS has invalid value" "ERROR"
            container_log "- - Inform a valid value from 512mb to ${MEMORY_MAX}mb." "ERROR"
            return 0
        fi
    if [[ $JAVA_XMS -lt 512 ]];
        then  
            container_log "- JAVA_XMS has lower than minimal memory necessary" "ERROR"
            container_log "- - Inform a valid value from 512mb to ${MEMORY_MAX}mb." "ERROR"
            return 0
        fi
    if [[ ! $JAVA_XMX =~ ^[0-9]{1,10}$ ]];
        then
            container_log "- JAVA_XMX has invalid value" "ERROR"
            container_log "- - Inform a valid value from 512mb to ${MEMORY_MAX}mb." "ERROR"
            return 0
        fi
    if [[ $JAVA_XMX -gt $MEMORY_MAX ]];
        then  
            container_log "- JAVA_XMX has greater than maximum memory avaliable" "ERROR"
            container_log "- - Inform a valid value from 512mb to ${MEMORY_MAX}mb." "ERROR"
            return 0
        fi
    if [[ $JAVA_XMS -gt $JAVA_XMX ]];
        then
            container_log "- JAVA_XMS has greater than JAVA_XMX" "ERROR"
            container_log "- - Inform a valid value from 512mb to ${JAVA_XMX}mb." "ERROR"
            return 0
		fi
	#
    container_log "- Memory Usage" "INFO"
	container_log "- - JAVA_XMS.: ${JAVA_XMS}mb" "INFO"
	container_log "- - JAVA_XMX.: ${JAVA_XMX}mb" "INFO"
	export JAVA_XMS=$JAVA_XMS
	export JAVA_XMX=$JAVA_XMX
    #
    container_log "Database Params" "INFO"
    #
    MARIADB_HOST=${MARIADB_HOST:-"127.0.0.1"}
    MARIADB_PORT=${MARIADB_PORT:-"3306"}
    let MARIADB_PORT=$(echo $MARIADB_PORT | sed 's/[^0-9]*//g')
    MARIADB_DATABASE=${MARIADB_DATABASE:-"l2jlogin"}
    MARIADB_USERNAME=${MARIADB_USERNAME:-"l2jlogin"}
    MARIADB_PASSWORD=${MARIADB_PASSWORD:-"l2jlogin"}
    MARIADB_IDLE_TIME=${MARIADB_IDLE_TIME:-"30"}
    let MARIADB_IDLE_TIME=$(echo $MARIADB_IDLE_TIME | sed 's/[^0-9]*//g')
    let MARIADB_IDLE_TIME=0
    MARIADB_CONNECTIONS=${MARIADB_CONNECTIONS:-"16"}
    let MARIADB_CONNECTIONS=$(echo $MARIADB_CONNECTIONS | sed 's/[^0-9]*//g')
    #
    if [[ "$MARIADB_HOST" == '' ]];
        then
            container_log "- MARIADB_HOST cannot be empty" "ERROR"
            container_log "- - A valid hostname or ip address has required." "ERROR"
            return 0
		fi
    if [[ ! $MARIADB_PORT =~ ^[0-9]{1,10}$ ]];
        then
            container_log "- MARIADB_PORT has invalid" "ERROR"
            container_log "- - A valid connection port has required." "ERROR"
            return 0
		fi
    if [[ "$MARIADB_DATABASE" == '' ]];
        then
            container_log "- MARIADB_DATABASE cannot be empty" "ERROR"
            container_log "- - A valid database name has required." "ERROR"
            return 0
		fi
    if [[ "$MARIADB_USERNAME" == '' ]];
        then
            container_log "- MARIADB_USERNAME cannot be empty" "ERROR"
            container_log "- - A valid username has required." "ERROR"
            return 0
		fi
    if [[ "$MARIADB_PASSWORD" == '' ]];
        then
            container_log "- MARIADB_PASSWORD cannot be empty" "ERROR"
            container_log "- - A valid password has required." "ERROR"
            return 0
		fi
    if [[ ! $MARIADB_IDLE_TIME =~ ^[0-9]{1,10}$ ]];
        then
            container_log "- MARIADB_IDLE_TIME has invalid" "ERROR"
            container_log "- - A valid iddle time for connections has required." "ERROR"
            return 0
		fi
    if [[ ! $MARIADB_CONNECTIONS =~ ^[0-9]{1,10}$ ]];
        then
            container_log "- MARIADB_CONNECTIONS has invalid" "ERROR"
            container_log "- - A valid number of connections has required." "ERROR"
            return 0
		fi
    #
    container_log " - Database Settings" "INFO"
	container_log " - - HOST........: ${MARIADB_HOST}" "INFO"
	container_log " - - PORT........: ${MARIADB_PORT}" "INFO"
	container_log " - - DATABASE....: ${MARIADB_DATABASE}" "INFO"
	container_log " - - USERNAME....: ${MARIADB_USERNAME}" "INFO"
	container_log " - - PASSWORD....: ${MARIADB_PASSWORD}" "INFO"
	container_log " - - IDLE TIME...: ${MARIADB_IDLE_TIME}" "INFO"
	container_log " - - CONNECTIONS.: ${MARIADB_CONNECTIONS}" "INFO"
	export MARIADB_HOST=$MARIADB_HOST
	export MARIADB_PORT=$MARIADB_PORT
    export MARIADB_DATABASE=$MARIADB_DATABASE
    export MARIADB_USERNAME=$MARIADB_USERNAME
    export MARIADB_PASSWORD=$MARIADB_PASSWORD
    export MARIADB_IDLE_TIME=$MARIADB_IDLE_TIME
    export MARIADB_CONNECTIONS=$MARIADB_CONNECTIONS
    #
    container_log "Server Params" "INFO"
    #
    SERVER_ID=${SERVER_ID:-"1"}                                                                                     #RequestServerId = 1
    SERVER_UPNP=${SERVER_UPNP:-"True"}                                                                              #EnableUPnP = True
    SERVER_BIND=${SERVER_BIND:-"*"}                                                                                 #Host = *
    SERVER_PORT=${SERVER_PORT:-"7777"}                                                                              #Port = 7777
    SERVER_PLAYER_MAX=${SERVER_ONLINE_MAX:-"500"}                                                                   #MaxOnlineUsers = 500
    SERVER_ACCEPT_ALTID=${SERVER_ACCEPT_ALTID:-"True"}                                                              #AcceptAlternateId = True
    #
    LOGIN_HOST=${LOGIN_HOST:-"127.0.0.1"}                                                                           #LoginHost = *
    LOGIN_PORT=${LOGIN_PORT:-"9014"}                                                                                #LoginPort = 9014
    #
    SERVER_DATAPACK_ROOT="."                                                                                        #DatapackRoot = .
    SERVER_RESERVE_HOST_ON_LOGIN="False"                                                                            #ReserveHostOnLogin = False
    SERVER_SCRIPT_ROOT="./script"                                                                                   #ScriptRoot = ./script
    SERVER_ALLOWED_PROTOCOL="267,268,271,273"                                                                       #AllowedProtocolRevisions = 267,268,271,273
    SERVER_ID_FACTORY="BitSet"                                                                                      #IdFactory = BitSet
    SERVER_BAD_ID_CHECKING="True"                                                                                   #BadIdChecking = True
    #
    container_log " - Server Settings" "INFO"
    container_log " - - Main" "INFO"
	container_log " - - - EnableUPnP........: ${SERVER_UPNP}" "INFO"
	container_log " - - - Host..............: ${SERVER_BIND}" "INFO"
	container_log " - - - Port..............: ${SERVER_PORT}" "INFO"
    container_log " - - - MaxOnlineUsers....: ${SERVER_PORT}" "INFO"
	container_log " - - - RequestServerId...: ${SERVER_ID}" "INFO"
    container_log " - - - AcceptAlternateId.: ${SERVER_ACCEPT_ALTID}" "INFO"
    container_log " - - Login" "INFO"
	container_log " - - - LoginHost......: ${LOGIN_HOST}" "INFO"
	container_log " - - - LoginPort......: ${LOGIN_PORT}" "INFO"
    container_log " - - General" "INFO"
	container_log " - - - ScriptRoot...............: ${SERVER_SCRIPT_ROOT}" "INFO"    
	container_log " - - - DatapackRoot.............: ${SERVER_DATAPACK_ROOT}" "INFO"    
	container_log " - - - IdFactory................: ${SERVER_ID_FACTORY}" "INFO"    
	container_log " - - - BadIdChecking............: ${SERVER_BAD_ID_CHECKING}" "INFO"    
	container_log " - - - AllowedProtocolRevisions.: ${SERVER_ALLOWED_PROTOCOL}" "INFO"    
    export SERVER_ID=$SERVER_ID
    export SERVER_UPNP=$SERVER_UPNP
    export SERVER_BIND=$SERVER_BIND
    export SERVER_PORT=$SERVER_PORT
    export SERVER_PLAYER_MAX=$SERVER_PLAYER_MAX
    export SERVER_ACCEPT_ALTID=$SERVER_ACCEPT_ALTID
    export LOGIN_HOST=$LOGIN_HOST
    export LOGIN_PORT=$LOGIN_PORT
    export SERVER_DATAPACK_ROOT=$SERVER_DATAPACK_ROOT
    export SERVER_RESERVE_HOST_ON_LOGIN=$SERVER_RESERVE_HOST_ON_LOGIN
    export SERVER_SCRIPT_ROOT=$SERVER_SCRIPT_ROOT
    export SERVER_ALLOWED_PROTOCOL=$SERVER_ALLOWED_PROTOCOL
    export SERVER_ID_FACTORY=$SERVER_ID_FACTORY
    export SERVER_BAD_ID_CHECKING=$SERVER_BAD_ID_CHECKING
    #
	return 1
}
# ---------------------------------------------------------------------------
# Function CONFIG
# ---------------------------------------------------------------------------
container_config() {
    #
    container_log "Config Management" "INFO"
    #
    container_log "- config/server.properties" "INFO"
	cat > $FILE_SERVER_CONFIG_SERVER << EOF
EnableUPnP = ${SERVER_UPNP}
Host = ${SERVER_BIND}
Port = ${SERVER_PORT}
LoginHost = ${LOGIN_HOST}
LoginPort = ${LOGIN_PORT}
RequestServerId = ${SERVER_ID}
AcceptAlternateId = ${SERVER_ACCEPT_ALTID}
ReserveHostOnLogin = ${SERVER_RESERVE_HOST_ON_LOGIN}
DatapackRoot = ${SERVER_DATAPACK_ROOT}
ScriptRoot = ${SERVER_SCRIPT_ROOT}
MaxOnlineUsers = ${SERVER_PLAYER_MAX}
AllowedProtocolRevisions = ${SERVER_ALLOWED_PROTOCOL}
IdFactory = ${SERVER_ID_FACTORY}
BadIdChecking = ${SERVER_BAD_ID_CHECKING}
EOF
    container_log "- config/database.properties" "INFO"
	cat > $FILE_SERVER_CONFIG_DATABASE << EOF
URL = jdbc:mariadb://${MARIADB_HOST}:${MARIADB_PORT}/${MARIADB_DATABASE}
User = ${MARIADB_USERNAME}
Password = ${MARIADB_PASSWORD}
MaxConnections = ${MARIADB_CONNECTIONS}
MaxIdleTime = ${MARIADB_IDLE_TIME}
EOF
    #
    container_log "- cli/config/game-server.properties" "INFO"
	cat > $FILE_CLIENT_CONFIG_DATABASE << EOF
DatabaseURL=jdbc:mariadb://${MARIADB_HOST}:${MARIADB_PORT}
DatabaseName=${MARIADB_DATABASE}
DatabaseUser=${MARIADB_USERNAME}
DatabasePassword=${MARIADB_PASSWORD}
EOF
    #
	return 1
}
# ---------------------------------------------------------------------------
# Function DATABASE
# ---------------------------------------------------------------------------
container_database() {
    #
    container_log "Database Management" "INFO"
    #
    container_log "- Checking connectivity" "INFO"
    CHECK_MARIADB_CONNECTION=$(mysql -h ${MARIADB_HOST} -u${MARIADB_USERNAME} -p${MARIADB_PASSWORD} -e "SHOW DATABASES" 2>&1)
    if [[ $? -eq 1 ]];
        then
            container_log "- - Can't connect on database" "ERROR"
            return 0
        else
            container_log "- - Successfully connected" "INFO"
		fi
    #
    container_log "- Checking ${MARIADB_DATABASE} on ${MARIADB_HOST}" "INFO"
    CHECK_MARIADB_CONNECTION=$(mysql -h ${MARIADB_HOST} -u${MARIADB_USERNAME} -p${MARIADB_PASSWORD} -e "SHOW DATABASES" | grep ${MARIADB_DATABASE})
    if [[ "$CHECK_MARIADB_CONNECTION" == '' ]];
        then
            container_log "- - ${MARIADB_DATABASE} not exists on ${MARIADB_HOST}" "WARN"
            container_log "##########################################################################################"
            cd /opt/l2jserver/cli/;
            printf "db install -sql ${SCRIPT_PATH}/sql -u ${MARIADB_USERNAME} -p ${MARIADB_PASSWORD} -m FULL -t GAME -c -mods" | /bin/sh /opt/l2jserver/cli/l2jcli.sh
            cd ..;
            container_log "##########################################################################################"
            container_log "- - ${MARIADB_DATABASE} has been created on ${MARIADB_HOST}" "INFO"
        else
            container_log "- - ${MARIADB_DATABASE} exists on ${MARIADB_HOST}" "INFO"
		fi
    #
	return 1 
}
# ---------------------------------------------------------------------------
# Main Events
# ---------------------------------------------------------------------------
#
sleep 3
#
container_copyright
#
container_params
CONTAINER_PARAMS_CHECK=$?
if [[ $CONTAINER_PARAMS_CHECK -eq 0 ]];
	then
        exit 1
	fi
#
container_config
CONTAINER_CONFIG_CHECK=$?
if [[ $CONTAINER_CONFIG_CHECK -eq 0 ]];
	then
		exit 1
	fi
#
container_database
CONTAINER_DATABASE_CHECK=$?
if [[ $CONTAINER_DATABASE_CHECK -eq 0 ]];
	then
		exit 1
	fi
#
container_structure
CONTAINER_STRUCTURE_CHECK=$?
if [[ $CONTAINER_STRUCTURE_CHECK -eq 0 ]];
	then
		exit 1
	fi
#
container_log "##########################################################################################" "INFO"
#
cd ${SCRIPT_PATH} &&  java -Xms${JAVA_XMS}m -Xmx${JAVA_XMX}m -jar l2jserver.jar
#
container_log "##########################################################################################" "INFO"
#
exit 0